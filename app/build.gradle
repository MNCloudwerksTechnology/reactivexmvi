plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

group='de.niew.reactivexmvi'

android {
    compileSdk 30

    defaultConfig {
        applicationId "de.niew.reactivexmvi"
        minSdk 21
        targetSdk 30
        versionCode 1
        versionName "1.2"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    def versions = [
            kotlin_version      : "1.5.30",
            rx_version          : "3.0.1",
            rx_android_version  : "3.0.0",
            androidx_core       : "1.6.0",
            androidx_appcompat  : "1.3.1",
    ]

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //reactive and mvi Pattern
    implementation "io.reactivex.rxjava3:rxandroid:$versions.rx_android_version"
    implementation("io.reactivex.rxjava3:rxkotlin:$versions.rx_version")
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    options.charSet = 'UTF-8'
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
